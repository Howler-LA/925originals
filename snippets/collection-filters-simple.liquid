{% comment %}
  Simplified Collection Filtering System
  Uses basic URL parameters and handles filtering in Liquid
{% endcomment %}

{% liquid
  assign price_min = collection.products.first.price
  assign price_max = collection.products.first.price
  assign all_types = collection.all_types | sort
  assign all_vendors = collection.all_vendors | sort
  
  # Get URL parameters
  assign selected_type = request.locale.root_url | append: request.fullpath | split: 'type=' | last | split: '&' | first | url_decode
  assign selected_vendor = request.locale.root_url | append: request.fullpath | split: 'vendor=' | last | split: '&' | first | url_decode
  assign sort_by = request.locale.root_url | append: request.fullpath | split: 'sort_by=' | last | split: '&' | first | url_decode
  
  # Calculate price range
  for product in collection.products
    if product.price < price_min
      assign price_min = product.price
    endif
    if product.price > price_max
      assign price_max = product.price
    endif
  endfor
  
  # Convert to dollars for display
  assign price_min_dollars = price_min | divided_by: 100
  assign price_max_dollars = price_max | divided_by: 100
%}

<div 
  class="collection-filters bg-white border-b border-stone-200 sticky top-0 z-40"
  x-data="simpleCollectionFilters()"
  x-init="init()"
>
  <!-- Mobile Filter Toggle -->
  <div class="lg:hidden p-4 border-b border-stone-100">
    <button 
      @click="mobileFiltersOpen = !mobileFiltersOpen"
      class="flex items-center gap-2 text-sm font-medium text-stone-700"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707v4.586a1 1 0 01-.293.707L9 19.414V14.414a1 1 0 00-.293-.707L2.293 7.293A1 1 0 012 6.586V4z"></path>
      </svg>
      Filters
      <span x-show="activeFiltersCount > 0" class="bg-stone-900 text-white text-xs px-2 py-1 rounded-full" x-text="activeFiltersCount"></span>
    </button>
  </div>

  <!-- Filter Controls -->
  <div 
    x-show="mobileFiltersOpen || window.innerWidth >= 1024"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 max-h-0"
    x-transition:enter-end="opacity-100 max-h-96"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100 max-h-96"
    x-transition:leave-end="opacity-0 max-h-0"
    class="overflow-hidden"
  >
    <div class="container py-4">
      <div class="flex flex-wrap lg:flex-nowrap gap-6 items-center">
        
        <!-- Sort By -->
        <div class="filter-group">
          <label class="text-xs font-medium text-stone-500 uppercase tracking-wide mb-2 block">Sort By</label>
          <select 
            x-model="sortBy"
            @change="applyFilters()"
            class="form-input text-sm border-stone-300 rounded-md"
          >
            <option value="">Featured</option>
            <option value="best-selling">Best Selling</option>
            <option value="title-ascending">A-Z</option>
            <option value="title-descending">Z-A</option>
            <option value="price-ascending">Price: Low to High</option>
            <option value="price-descending">Price: High to Low</option>
            <option value="created-ascending">Oldest</option>
            <option value="created-descending">Newest</option>
          </select>
        </div>

        <!-- Product Type -->
        {% if all_types.size > 1 %}
        <div class="filter-group">
          <label class="text-xs font-medium text-stone-500 uppercase tracking-wide mb-2 block">
            Type
          </label>
          <select 
            x-model="selectedType"
            @change="applyFilters()"
            class="form-input text-sm border-stone-300 rounded-md"
          >
            <option value="">All Types</option>
            {% for type in all_types %}
              <option value="{{ type | escape }}" {% if selected_type == type %}selected{% endif %}>{{ type }}</option>
            {% endfor %}
          </select>
        </div>
        {% endif %}

        <!-- Vendor -->
        {% if all_vendors.size > 1 %}
        <div class="filter-group">
          <label class="text-xs font-medium text-stone-500 uppercase tracking-wide mb-2 block">Brand</label>
          <select 
            x-model="selectedVendor"
            @change="applyFilters()"
            class="form-input text-sm border-stone-300 rounded-md"
          >
            <option value="">All Brands</option>
            {% for vendor in all_vendors %}
              <option value="{{ vendor | escape }}" {% if selected_vendor == vendor %}selected{% endif %}>{{ vendor }}</option>
            {% endfor %}
          </select>
        </div>
        {% endif %}

        <!-- Clear Filters -->
        <div class="filter-group">
          <button 
            @click="clearFilters()"
            x-show="activeFiltersCount > 0"
            class="text-sm text-stone-500 hover:text-stone-700 underline"
          >
            Clear All
          </button>
        </div>

      </div>
    </div>
  </div>

  <!-- Results Count -->
  <div class="results-info bg-gray-50 py-2 text-sm text-gray-600">
    <div class="container">
      <span>
        Showing {{ collection.products.size }} products
        {% if selected_type != blank %}
          • Type: {{ selected_type }}
        {% endif %}
        {% if selected_vendor != blank %}
          • Brand: {{ selected_vendor }}
        {% endif %}
      </span>
    </div>
  </div>
</div>

<script>
function simpleCollectionFilters() {
  return {
    // Filter state
    mobileFiltersOpen: false,
    sortBy: '{{ sort_by | escape }}',
    selectedType: '{{ selected_type | escape }}',
    selectedVendor: '{{ selected_vendor | escape }}',

    // Initialize
    init() {
      // Close mobile filters when screen gets larger
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 1024) {
          this.mobileFiltersOpen = false;
        }
      });
    },

    // Apply filters
    applyFilters() {
      let baseUrl = window.location.pathname;
      
      // For Shopify collections, we need to construct the URL differently
      if (this.selectedType) {
        // Navigate to a type-specific collection URL or use search
        const searchUrl = `/search?q=product_type:"${this.selectedType}"&type=product`;
        window.location.href = searchUrl;
        return;
      }
      
      if (this.selectedVendor) {
        // Navigate to a vendor-specific collection URL or use search
        const searchUrl = `/search?q=vendor:"${this.selectedVendor}"&type=product`;
        window.location.href = searchUrl;
        return;
      }
      
      // If no specific filters, just apply sorting
      const params = new URLSearchParams();
      if (this.sortBy) {
        params.set('sort_by', this.sortBy);
      }
      
      const newUrl = `${baseUrl}${params.toString() ? '?' + params.toString() : ''}`;
      window.location.href = newUrl;
    },

    // Clear all filters
    clearFilters() {
      window.location.href = window.location.pathname;
    },

    // Calculate active filters count
    get activeFiltersCount() {
      let count = 0;
      if (this.selectedType) count++;
      if (this.selectedVendor) count++;
      if (this.sortBy) count++;
      return count;
    }
  }
}
</script>

<style>
.filter-group {
  @apply min-w-0 flex-shrink-0;
}

@media (max-width: 1023px) {
  .filter-controls {
    @apply lg:block;
  }
  
  .filter-group {
    @apply w-full;
  }
}

.form-input {
  @apply block w-full px-3 py-2 border border-stone-300 rounded-md shadow-sm 
         focus:outline-none focus:ring-1 focus:ring-stone-500 focus:border-stone-500 
         sm:text-sm bg-white;
}
</style>
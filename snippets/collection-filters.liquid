{% comment %}
  Collection Filtering System
  Provides dynamic filtering for collections by price, size, color, availability, etc.
{% endcomment %}

{% liquid
  assign price_min = collection.products.first.price
  assign price_max = collection.products.first.price
  assign all_types = collection.all_types | sort
  assign all_vendors = collection.all_vendors | sort
  
  # Calculate price range
  for product in collection.products
    if product.price < price_min
      assign price_min = product.price
    endif
    if product.price > price_max
      assign price_max = product.price
    endif
  endfor
  
  # Convert to dollars for display
  assign price_min_dollars = price_min | divided_by: 100
  assign price_max_dollars = price_max | divided_by: 100
%}

<div 
  class="collection-filters bg-white border-b border-stone-200 sticky top-0 z-40"
  x-data="collectionFilters()"
  x-init="init()"
>
  <!-- Mobile Filter Toggle -->
  <div class="lg:hidden p-4 border-b border-stone-100">
    <button 
      @click="mobileFiltersOpen = !mobileFiltersOpen"
      class="flex items-center gap-2 text-sm font-medium text-stone-700"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707v4.586a1 1 0 01-.293.707L9 19.414V14.414a1 1 0 00-.293-.707L2.293 7.293A1 1 0 012 6.586V4z"></path>
      </svg>
      Filters
      <span x-show="activeFiltersCount > 0" class="bg-stone-900 text-white text-xs px-2 py-1 rounded-full" x-text="activeFiltersCount"></span>
    </button>
  </div>

  <!-- Filter Controls -->
  <div 
    class="filter-controls"
    x-show="mobileFiltersOpen || window.innerWidth >= 1024"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 max-h-0"
    x-transition:enter-end="opacity-100 max-h-96"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100 max-h-96"
    x-transition:leave-end="opacity-0 max-h-0"
    class="overflow-hidden"
  >
    <div class="container py-4">
      <div class="flex flex-wrap lg:flex-nowrap gap-6 items-center">
        
        <!-- Sort By -->
        <div class="filter-group">
          <label class="text-xs font-medium text-stone-500 uppercase tracking-wide mb-2 block">Sort By</label>
          <select 
            x-model="sortBy"
            @change="applyFilters()"
            class="form-input text-sm border-stone-300 rounded-md"
          >
            <option value="manual">Featured</option>
            <option value="best-selling">Best Selling</option>
            <option value="title-ascending">A-Z</option>
            <option value="title-descending">Z-A</option>
            <option value="price-ascending">Price: Low to High</option>
            <option value="price-descending">Price: High to Low</option>
            <option value="created-ascending">Oldest</option>
            <option value="created-descending">Newest</option>
          </select>
        </div>

        <!-- Price Range -->
        {% if price_min != price_max %}
        <div class="filter-group">
          <label class="text-xs font-medium text-stone-500 uppercase tracking-wide mb-2 block">
            Price Range
          </label>
          <div class="flex items-center gap-2 text-sm">
            <input 
              type="number" 
              x-model="priceMin"
              @blur="applyFilters()"
              min="{{ price_min_dollars }}" 
              max="{{ price_max_dollars }}"
              placeholder="{{ price_min_dollars }}"
              class="w-20 px-2 py-1 border border-stone-300 rounded text-xs"
            >
            <span class="text-stone-400">to</span>
            <input 
              type="number" 
              x-model="priceMax"
              @blur="applyFilters()"
              min="{{ price_min_dollars }}" 
              max="{{ price_max_dollars }}"
              placeholder="{{ price_max_dollars }}"
              class="w-20 px-2 py-1 border border-stone-300 rounded text-xs"
            >
          </div>
        </div>
        {% endif %}

        <!-- Availability -->
        <div class="filter-group">
          <label class="text-xs font-medium text-stone-500 uppercase tracking-wide mb-2 block">Availability</label>
          <div class="flex items-center gap-4 text-sm">
            <label class="flex items-center gap-2">
              <input 
                type="checkbox" 
                x-model="showInStock"
                @change="applyFilters()"
                class="rounded border-stone-300"
              >
              <span>In Stock</span>
            </label>
            <label class="flex items-center gap-2">
              <input 
                type="checkbox" 
                x-model="showOutOfStock"
                @change="applyFilters()"
                class="rounded border-stone-300"
              >
              <span>Out of Stock</span>
            </label>
          </div>
        </div>

        <!-- Product Type -->
        {% if all_types.size > 1 %}
        <div class="filter-group">
          <label class="text-xs font-medium text-stone-500 uppercase tracking-wide mb-2 block">
            Type ({{ all_types.size }} available)
          </label>
          <select 
            x-model="selectedType"
            @change="applyFilters()"
            class="form-input text-sm border-stone-300 rounded-md"
          >
            <option value="">All Types</option>
            {% for type in all_types %}
              <option value="{{ type | escape }}" data-debug="{{ type | escape }}">{{ type }}</option>
            {% endfor %}
          </select>
          <!-- Debug: Show available types -->
          <div class="text-xs text-stone-400 mt-1">
            Available: {% for type in all_types %}{{ type }}{% unless forloop.last %}, {% endunless %}{% endfor %}
          </div>
        </div>
        {% endif %}

        <!-- Vendor -->
        {% if all_vendors.size > 1 %}
        <div class="filter-group">
          <label class="text-xs font-medium text-stone-500 uppercase tracking-wide mb-2 block">Brand</label>
          <select 
            x-model="selectedVendor"
            @change="applyFilters()"
            class="form-input text-sm border-stone-300 rounded-md"
          >
            <option value="">All Brands</option>
            {% for vendor in all_vendors %}
              <option value="{{ vendor | escape }}">{{ vendor }}</option>
            {% endfor %}
          </select>
        </div>
        {% endif %}

        <!-- Clear Filters -->
        <div class="filter-group">
          <button 
            @click="clearFilters()"
            x-show="activeFiltersCount > 0"
            class="text-sm text-stone-500 hover:text-stone-700 underline"
          >
            Clear All
          </button>
        </div>

      </div>
    </div>
  </div>

  <!-- Active Filters Display -->
  <div 
    x-show="activeFiltersCount > 0" 
    class="active-filters bg-gray-50 border-b border-gray-200 py-2"
  >
    <div class="container">
      <div class="flex flex-wrap gap-2 items-center">
        <span class="text-xs font-medium text-gray-500">Active Filters:</span>
        
        <!-- Price Filter Tag -->
        <template x-if="priceMin || priceMax">
          <span class="inline-flex items-center gap-1 px-2 py-1 bg-white border border-gray-300 rounded-full text-xs">
            Price: $<span x-text="priceMin || {{ price_min_dollars }}"></span> - $<span x-text="priceMax || {{ price_max_dollars }}"></span>
            <button @click="priceMin = null; priceMax = null; applyFilters()" class="ml-1 text-gray-400 hover:text-gray-600">×</button>
          </span>
        </template>

        <!-- Type Filter Tag -->
        <template x-if="selectedType">
          <span class="inline-flex items-center gap-1 px-2 py-1 bg-white border border-gray-300 rounded-full text-xs">
            Type: <span x-text="selectedType"></span>
            <button @click="selectedType = ''; applyFilters()" class="ml-1 text-gray-400 hover:text-gray-600">×</button>
          </span>
        </template>

        <!-- Vendor Filter Tag -->
        <template x-if="selectedVendor">
          <span class="inline-flex items-center gap-1 px-2 py-1 bg-white border border-gray-300 rounded-full text-xs">
            Brand: <span x-text="selectedVendor"></span>
            <button @click="selectedVendor = ''; applyFilters()" class="ml-1 text-gray-400 hover:text-gray-600">×</button>
          </span>
        </template>

      </div>
    </div>
  </div>

  <!-- Results Count -->
  <div class="results-info bg-gray-50 py-2 text-sm text-gray-600">
    <div class="container">
      <span x-show="filteredProductsCount !== null">
        Showing <span x-text="filteredProductsCount"></span> of {{ collection.products.size }} products
      </span>
    </div>
  </div>
</div>

<script>
function collectionFilters() {
  return {
    // Filter state
    mobileFiltersOpen: false,
    sortBy: 'manual',
    priceMin: null,
    priceMax: null,
    selectedType: '',
    selectedVendor: '',
    showInStock: true,
    showOutOfStock: true,
    filteredProductsCount: null,
    isInitialized: false,

    // Initialize
    init() {
      // Read URL parameters on load
      this.readUrlParams();
      this.isInitialized = true;
      
      // Close mobile filters when screen gets larger
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 1024) {
          this.mobileFiltersOpen = false;
        }
      });
    },

    // Read URL parameters
    readUrlParams() {
      const urlParams = new URLSearchParams(window.location.search);
      
      if (urlParams.get('sort_by')) this.sortBy = urlParams.get('sort_by');
      
      // Parse search query (q parameter)
      const searchQuery = urlParams.get('q');
      if (searchQuery) {
        // Extract product_type from search query
        const productTypeMatch = searchQuery.match(/product_type:"([^"]+)"/);
        if (productTypeMatch) {
          this.selectedType = productTypeMatch[1];
        }
        
        // Extract vendor from search query
        const vendorMatch = searchQuery.match(/vendor:"([^"]+)"/);
        if (vendorMatch) {
          this.selectedVendor = vendorMatch[1];
        }
      }
      
      // Parse price filters (try new format)
      if (urlParams.get('filter.v.price.gte')) this.priceMin = parseInt(urlParams.get('filter.v.price.gte')) / 100;
      if (urlParams.get('filter.v.price.lte')) this.priceMax = parseInt(urlParams.get('filter.v.price.lte')) / 100;
      
      // Parse availability
      const availability = urlParams.get('filter.v.availability');
      if (availability === '1') {
        this.showInStock = true;
        this.showOutOfStock = false;
      } else if (availability === '0') {
        this.showInStock = false;
        this.showOutOfStock = true;
      }
      
      // Parse constraint parameter (fallback)
      const constraint = urlParams.get('constraint');
      if (constraint) {
        const constraints = constraint.split('+');
        
        constraints.forEach(c => {
          if (c.startsWith('price:>=')) {
            this.priceMin = parseInt(c.replace('price:>=', '')) / 100;
          } else if (c.startsWith('price:<=')) {
            this.priceMax = parseInt(c.replace('price:<=', '')) / 100;
          } else if (c.startsWith('product_type:')) {
            this.selectedType = c.replace('product_type:', '');
          } else if (c.startsWith('vendor:')) {
            this.selectedVendor = c.replace('vendor:', '');
          }
        });
      }
      
      // Legacy parameter fallbacks
      if (urlParams.get('price_min')) this.priceMin = parseInt(urlParams.get('price_min')) / 100;
      if (urlParams.get('price_max')) this.priceMax = parseInt(urlParams.get('price_max')) / 100;
      if (urlParams.get('product_type')) this.selectedType = urlParams.get('product_type');
      if (urlParams.get('vendor')) this.selectedVendor = urlParams.get('vendor');
    },

    // Apply filters with debouncing
    applyFilters() {
      // Only apply filters after initialization to prevent immediate redirect
      if (!this.isInitialized) return;
      
      // Debounce to prevent rapid fire requests
      clearTimeout(this.filterTimeout);
      this.filterTimeout = setTimeout(() => {
        this.executeFilter();
      }, 500);
    },

    // Execute the actual filter
    executeFilter() {
      const params = new URLSearchParams();
      
      // Add sort parameter
      if (this.sortBy && this.sortBy !== 'manual') {
        params.set('sort_by', this.sortBy);
      }
      
      // For product type filtering, let's try multiple approaches
      if (this.selectedType) {
        // Try the most basic approach first
        params.set('q', `product_type:"${this.selectedType}"`);
        console.log('Using search query for product type:', this.selectedType);
      }
      
      // Add vendor parameter (simpler approach)
      if (this.selectedVendor) {
        const existingQ = params.get('q') || '';
        const vendorQuery = `vendor:"${this.selectedVendor}"`;
        params.set('q', existingQ ? `${existingQ} AND ${vendorQuery}` : vendorQuery);
      }
      
      // Add price parameters (try both old and new formats)
      if (this.priceMin && this.priceMin > 0) {
        params.set('filter.v.price.gte', this.priceMin * 100);
      }
      if (this.priceMax && this.priceMax > 0) {
        params.set('filter.v.price.lte', this.priceMax * 100);
      }

      // Add availability
      if (this.showInStock && !this.showOutOfStock) {
        params.set('filter.v.availability', '1');
      } else if (!this.showInStock && this.showOutOfStock) {
        params.set('filter.v.availability', '0');
      }
      
      // Build new URL
      const newParamsString = params.toString();
      const newUrl = `${window.location.pathname}${newParamsString ? '?' + newParamsString : ''}`;
      
      console.log('Final URL:', newUrl);
      window.location.href = newUrl;
    },

    // Clear all filters
    clearFilters() {
      this.sortBy = 'manual';
      this.priceMin = null;
      this.priceMax = null;
      this.selectedType = '';
      this.selectedVendor = '';
      this.showInStock = true;
      this.showOutOfStock = true;
      
      // Redirect to clean URL
      window.location.href = window.location.pathname;
    },

    // Calculate active filters count
    get activeFiltersCount() {
      let count = 0;
      if (this.priceMin && this.priceMin > 0) count++;
      if (this.priceMax && this.priceMax > 0) count++;
      if (this.selectedType) count++;
      if (this.selectedVendor) count++;
      if (!this.showInStock || !this.showOutOfStock) count++;
      if (this.sortBy && this.sortBy !== 'manual') count++;
      return count;
    }
  }
}
</script>

<style>
.filter-group {
  @apply min-w-0 flex-shrink-0;
}

@media (max-width: 1023px) {
  .filter-controls {
    @apply lg:block;
  }
  
  .filter-group {
    @apply w-full;
  }
}

.form-input {
  @apply block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm 
         focus:outline-none focus:ring-1 focus:ring-stone-500 focus:border-stone-500 
         sm:text-sm bg-white;
}
</style>
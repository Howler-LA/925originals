<div
  class="product-recommendations pb-5 lg:pb-20"
  data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related"
>
  {%- if recommendations.performed? and recommendations.products_count > 0 -%}
    <div class="pb-5 lg:pb-20">
      <div class="container">
        <header class="flex flex-col pt-2.5 lg:pt-5 gap-2">
          {% if recommendations.intent == 'related' %}
            {% render 'component-title' html:'h2' class:'' title:'You may also like' %}
          {% elsif recommendations.intent == 'complementary' %}
            {% render 'component-title' html:'h2' class:'' title:'Pair it with' %}
          {% endif %}
        </header>
      </div>
    </div>

    <div class="container">
      <ul class="grid lg:grid-cols-4 gap-10 lg:gap-20">
        {%- liquid
          for product in recommendations.products
            assign lazy_load = false
            if forloop.index > 2
              assign lazy_load = true
            endif
            for media in product.media
              if media.media_type == 'video'
                assign video = true
              else
                assign video = false
              endif
            endfor
            if video == true
              render 'card-product-double', card_product: product, lazy_load: lazy_load
            else
              render 'card-product-single', card_product: product, lazy_load: lazy_load
            endif
          else
            if collection.handle == 'all' and collection.all_vendors.size == 0 and collection.all_types.size == 0
              for i in (1..4)
                render 'card-product-double'
              endfor
            endif
          endfor
        -%}
        
      </ul>
    </div>
  {%- endif -%}
</div>

{% javascript %}
  const handleIntersection = (entries, observer) => {
    if (!entries[0].isIntersecting) return;

    observer.unobserve(productRecommendationsSection);

    const url = productRecommendationsSection.dataset.url;

    fetch(url)
      .then(response => response.text())
      .then(text => {
        const html = document.createElement('div');
        html.innerHTML = text;
        const recommendations = html.querySelector('.product-recommendations');

        if (recommendations && recommendations.innerHTML.trim().length) {
          productRecommendationsSection.innerHTML = recommendations.innerHTML;
        }
      })
      .catch(e => {
        console.error(e);
      });
  };

  const productRecommendationsSection = document.querySelector('.product-recommendations');
  const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});

  observer.observe(productRecommendationsSection);
{% endjavascript %}

{% schema %}
{
  "name": "Related Products",
  "tag": "section",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_product_recommendations",
      "label": "Enable product recommendations",
      "default": false
    }
  ],
  "presets": [
    {
      "name": "Related Products"
    }
  ]
}
{% endschema %}
